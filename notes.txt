anaconda


spyder



Microsoft
-----------
MS Office
windows OS
CRM tools
ERP tools
Azure
..
..


Acaconda
------------
spyder ide
jupyter notebook ( web interface)
anaconda prompt
orange visualization






*** Everything in python is object ***
*** Every object contains methods ***


number
--------
number can be integer or decimal or octal or hexa.

val = 10
aval = 343.3


string
-------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "unix shell scripting"
cname = """java programming"""


list ( just like array in C )( mutable , changeable )
---------------------------
list contains set of elements.
elements can be numbers or strings or any combination.
list elements are defined in [].

alist = [10,20,30,40]
blist = ["java","unix","oracle"]
clist = [30,435.43,"java"]


tuple  ( immutable  , unchangeable )
-----------
tuple contains set of elements.
elements can be numbers or strings or any combination.
tuple elemnets are defined in ().
*********** Elements inside the tuple cannot be modified directly *************

atup = (20,30,30,40)
btup = (34,43.34,"java")


dictionary ( hash  hashmap  json )
-----------------------------------
dictionary contains elements in the form of keys and values.
in dictionary , key would be number or string used to uniquely identify the value.
            value can be number or string or list or tuple or dictionary or complex structure

syntax:     object = { key:value , key:value , key:value }
example:      book = {"chap1":10 ,"chap2":20 ,"chap3':30}
               data = {1:2,3:4,5:6}
              bookinfo = {"chap1":["rao","US',100] ,"chap2":["rita","uk",300] }
	


set
------
set is unordered collection of unique items of same TYPE.

aset = {10,10,10,20,30,30}

commenting in python
------------------------

# this is single line comment


'''
this is the 
commented line

'''




statements
------------

- conditional statements
-------------------------
if
if-else
if-elif-elif..eles


- control statements
----------------------
for
while



operators
-------------

arithmetic operators : + - * % /

relational operators :   <  <=    >    >=    ==     !=

if 4 < 10:
   ###


name = 'python programming"
if name.count('p') == 2 :
     # some logic


logical operators :    and    or   not
---------------------
if cond1  and cond2:
      # statements


if cond1 or cond2:
     # statements


assignment operators  ( ++ and -- are NOT allowed in python )
-----------------------------------------------------------
val = 10
val = val + 1    (or)  val+=1
val = val - 1    (or)  val-=1

special operators
-----------------
+ ( objects should be same type)
*
in
as





How to display all the list of builtin(pre defined) functions and exceptions ?
-----------------------------------------------------------------
dir(__builtin__)






file handling
--------------

working with flat files  ( txt    json   csv   log conf .)
-------------------------------
read mode  : r mode
write mode  : w mode
append mod :  a mode


syntax: obj = open(filename , mode )
example: fr = open("customers.txt","r" )
              open("customers.txt","w")



closing the file

-----------------------
fw.close()


context manager






working with third party files ( pdf  pptx docx mp3 mp3 ... )
-------------------------------



dipslay all the list of builtin functions and exceptoins ?
-----------------------
dir(__builtin__)


exception handling
-----------------------

There are 2 types of errors.


-syntax error
-semantic error or runtime error

Handling the errors that occurs during the runtime is known as exception handling.

try
except
else
finally
raise



functions
-------------

there are 2 types of functions

- builtin functions
- user defined functions


user defined function | block | subroutine
-----------------------------------------------
- code reusability
- we define the block once and call it for multiple times.


ways of passing arguments
----------------------------

- fixed arguments
- default arguments
- keyword arguments
- variable length arguments













































libraries
--------------

- builtin libraries
----------------------
all the builtin libraries(which are generally used by everyone like math operations, system operations) comes with python by default.

8000+ are installed with anaconda spyder
3000+ are installed with python default tool (IDLE)



- third party libraries
-------------------------
Depending on the customized requirement(data anlytics , cloud , ML , image processing, databases,web development, storage) developer has to install the third party library from www.pypi.org




mysql steps
-------------


display all existing databases
---------------------------------
show databases ;

create your database
-------------------
create database mphasis;

access your database
---------------------
use mphasis;

create table
---------------
create table adultinfo(workclass varchar(100),education varchar(100),occupation varchar(100));

inserting records
----------------
insert into adultinfo values('private','btech','occupation');
insert into adultinfo values('public','mtech','govt officer');

display all the records
-------------------------
select * from adultinfo ;





















step1: connect to database
step2: define query
step3: execute query
step4: fetch the output
step5: close the connection





















-execute commands on the remote server
- copy files from local to remote
- copy files from remote to local
------------------------------------------

- enable ssh on the servers
- python library : paramiko ( to execute commands)  , pysftp ( secure ftp)


















